# Pod and Container Security Context Examples

# Baseline Security Pod
apiVersion: v1
kind: Pod
metadata:
  name: baseline-security-pod
  namespace: production
  labels:
    security-level: baseline
spec:
  # Pod-level security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 2000
    seccompProfile:
      type: RuntimeDefault
  
  containers:
  - name: app
    image: nginx:alpine
    
    # Container-level security context
    securityContext:
      allowPrivilegeEscalation: false
      runAsNonRoot: true
      runAsUser: 1000
      capabilities:
        drop:
        - ALL
      seccompProfile:
        type: RuntimeDefault
    
    ports:
    - containerPort: 8080
    
    volumeMounts:
    - name: tmp
      mountPath: /tmp
    - name: var-cache
      mountPath: /var/cache/nginx
  
  volumes:
  - name: tmp
    emptyDir: {}
  - name: var-cache
    emptyDir: {}
---
# Restricted Security Pod (Most Secure)
apiVersion: v1
kind: Pod
metadata:
  name: restricted-security-pod
  namespace: production
  labels:
    security-level: restricted
spec:
  # Pod-level security context (restricted)
  securityContext:
    runAsNonRoot: true
    runAsUser: 10001
    runAsGroup: 10001
    fsGroup: 10001
    seccompProfile:
      type: RuntimeDefault
    supplementalGroups: []
  
  containers:
  - name: app
    image: nginx:alpine
    
    # Container-level security context (restricted)
    securityContext:
      allowPrivilegeEscalation: false
      privileged: false
      runAsNonRoot: true
      runAsUser: 10001
      runAsGroup: 10001
      readOnlyRootFilesystem: true
      capabilities:
        drop:
        - ALL
      seccompProfile:
        type: RuntimeDefault
    
    ports:
    - containerPort: 8080
    
    # All writable paths must be explicitly mounted
    volumeMounts:
    - name: tmp
      mountPath: /tmp
    - name: var-cache
      mountPath: /var/cache/nginx
    - name: var-run
      mountPath: /var/run
    
    # Resource limits (required for restricted)
    resources:
      limits:
        cpu: "500m"
        memory: "512Mi"
        ephemeral-storage: "1Gi"
      requests:
        cpu: "100m"
        memory: "128Mi"
        ephemeral-storage: "100Mi"
  
  volumes:
  - name: tmp
    emptyDir:
      sizeLimit: "100Mi"
  - name: var-cache
    emptyDir:
      sizeLimit: "50Mi"
  - name: var-run
    emptyDir:
      sizeLimit: "10Mi"
  
  # Restricted pod settings
  hostNetwork: false
  hostPID: false
  hostIPC: false
  serviceAccountName: restricted-sa
  automountServiceAccountToken: false
---
# Multi-container pod with different security contexts
apiVersion: v1
kind: Pod
metadata:
  name: multi-container-security
  namespace: production
spec:
  securityContext:
    runAsNonRoot: true
    fsGroup: 2000
    seccompProfile:
      type: RuntimeDefault
  
  containers:
  # Web server container
  - name: web
    image: nginx:alpine
    securityContext:
      runAsUser: 1000
      runAsGroup: 1000
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
        - ALL
    ports:
    - containerPort: 8080
    volumeMounts:
    - name: web-content
      mountPath: /usr/share/nginx/html
      readOnly: true
    - name: nginx-tmp
      mountPath: /tmp
    - name: nginx-cache
      mountPath: /var/cache/nginx
  
  # Application container
  - name: app
    image: node:alpine
    securityContext:
      runAsUser: 1001
      runAsGroup: 1001
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
        - ALL
    command: ["node", "app.js"]
    volumeMounts:
    - name: app-tmp
      mountPath: /tmp
    - name: app-logs
      mountPath: /app/logs
  
  # Sidecar logging container
  - name: logging-sidecar
    image: fluentd:alpine
    securityContext:
      runAsUser: 1002
      runAsGroup: 1002
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
        - ALL
    volumeMounts:
    - name: app-logs
      mountPath: /var/log/app
      readOnly: true
    - name: fluentd-tmp
      mountPath: /tmp
  
  volumes:
  - name: web-content
    configMap:
      name: web-content
  - name: nginx-tmp
    emptyDir: {}
  - name: nginx-cache
    emptyDir: {}
  - name: app-tmp
    emptyDir: {}
  - name: app-logs
    emptyDir: {}
  - name: fluentd-tmp
    emptyDir: {}
---
# Pod with custom capabilities
apiVersion: v1
kind: Pod
metadata:
  name: custom-capabilities-pod
  namespace: production
spec:
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
  
  containers:
  - name: network-app
    image: network-app:latest
    
    securityContext:
      allowPrivilegeEscalation: false
      runAsNonRoot: true
      runAsUser: 1000
      readOnlyRootFilesystem: true
      capabilities:
        drop:
        - ALL
        add:
        - NET_BIND_SERVICE  # Allow binding to ports < 1024
        - NET_RAW          # Allow raw sockets (if needed)
    
    ports:
    - containerPort: 80  # Privileged port
    
    volumeMounts:
    - name: tmp
      mountPath: /tmp
  
  volumes:
  - name: tmp
    emptyDir: {}
