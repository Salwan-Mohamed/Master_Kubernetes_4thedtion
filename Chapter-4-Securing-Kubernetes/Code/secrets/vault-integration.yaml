# HashiCorp Vault Integration Examples

# Service Account for Vault authentication
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-auth-sa
  namespace: production
  annotations:
    vault.hashicorp.com/role: "webapp-role"
automountServiceAccountToken: true
---
# Vault Agent Sidecar Example
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp-with-vault-agent
  namespace: production
spec:
  replicas: 2
  selector:
    matchLabels:
      app: webapp-vault
  template:
    metadata:
      labels:
        app: webapp-vault
      annotations:
        # Vault Agent annotations
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/role: "webapp-role"
        vault.hashicorp.com/agent-inject-secret-database: "database/creds/webapp"
        vault.hashicorp.com/agent-inject-template-database: |
          {{- with secret "database/creds/webapp" -}}
          export DATABASE_USERNAME="{{ .Data.username }}"
          export DATABASE_PASSWORD="{{ .Data.password }}"
          export DATABASE_URL="postgres://{{ .Data.username }}:{{ .Data.password }}@postgres.production.svc.cluster.local:5432/webapp"
          {{- end }}
        vault.hashicorp.com/agent-inject-secret-config: "secret/webapp/config"
        vault.hashicorp.com/agent-inject-template-config: |
          {{- with secret "secret/webapp/config" -}}
          {
            "api_key": "{{ .Data.data.api_key }}",
            "jwt_secret": "{{ .Data.data.jwt_secret }}",
            "encryption_key": "{{ .Data.data.encryption_key }}"
          }
          {{- end }}
        # Cache settings
        vault.hashicorp.com/agent-cache-enable: "true"
        vault.hashicorp.com/agent-cache-use-auto-auth-token: "true"
    spec:
      serviceAccountName: vault-auth-sa
      containers:
      - name: webapp
        image: webapp:latest
        command:
        - /bin/sh
        - -c
        - |
          # Source database credentials from Vault Agent
          if [ -f /vault/secrets/database ]; then
            source /vault/secrets/database
          fi
          
          # Read config from Vault Agent
          if [ -f /vault/secrets/config ]; then
            export API_KEY=$(jq -r '.api_key' /vault/secrets/config)
            export JWT_SECRET=$(jq -r '.jwt_secret' /vault/secrets/config)
            export ENCRYPTION_KEY=$(jq -r '.encryption_key' /vault/secrets/config)
          fi
          
          # Start the application
          exec ./webapp
        
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "100m"
            memory: "128Mi"
      
      volumes:
      - name: tmp
        emptyDir: {}
---
# Vault CSI Driver Example
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: vault-webapp-secrets
  namespace: production
spec:
  provider: vault
  parameters:
    vaultAddress: "https://vault.example.com:8200"
    roleName: "webapp-role"
    objects: |
      - objectName: "database-username"
        secretPath: "database/creds/webapp"
        secretKey: "username"
      - objectName: "database-password"
        secretPath: "database/creds/webapp"
        secretKey: "password"
      - objectName: "api-key"
        secretPath: "secret/data/webapp/config"
        secretKey: "api_key"
      - objectName: "jwt-secret"
        secretPath: "secret/data/webapp/config"
        secretKey: "jwt_secret"
      - objectName: "tls-cert"
        secretPath: "pki/issue/webapp"
        secretKey: "certificate"
        method: "POST"
        options: |
          common_name: "webapp.example.com"
          ttl: "24h"
  # Sync to Kubernetes secrets
  secretObjects:
  - secretName: vault-webapp-k8s-secret
    type: Opaque
    data:
    - objectName: database-username
      key: username
    - objectName: database-password
      key: password
    - objectName: api-key
      key: api-key
  - secretName: vault-webapp-tls
    type: kubernetes.io/tls
    data:
    - objectName: tls-cert
      key: tls.crt
---
# Pod using Vault CSI Driver
apiVersion: v1
kind: Pod
metadata:
  name: webapp-vault-csi
  namespace: production
spec:
  serviceAccountName: vault-auth-sa
  containers:
  - name: webapp
    image: webapp:latest
    env:
    # Use secrets synced to Kubernetes
    - name: DATABASE_USERNAME
      valueFrom:
        secretKeyRef:
          name: vault-webapp-k8s-secret
          key: username
    - name: DATABASE_PASSWORD
      valueFrom:
        secretKeyRef:
          name: vault-webapp-k8s-secret
          key: password
    - name: API_KEY
      valueFrom:
        secretKeyRef:
          name: vault-webapp-k8s-secret
          key: api-key
    
    volumeMounts:
    # Mount Vault secrets as files
    - name: vault-secrets
      mountPath: "/mnt/secrets"
      readOnly: true
    # Mount TLS certificates
    - name: vault-tls
      mountPath: "/etc/ssl/certs"
      readOnly: true
    
    securityContext:
      runAsNonRoot: true
      runAsUser: 1000
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
        - ALL
  
  volumes:
  - name: vault-secrets
    csi:
      driver: secrets-store.csi.k8s.io
      readOnly: true
      volumeAttributes:
        secretProviderClass: vault-webapp-secrets
  - name: vault-tls
    secret:
      secretName: vault-webapp-tls
